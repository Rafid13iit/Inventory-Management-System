# Importing the `path` and `include` functions from Django's `urls` module.
# `path` is used to define URL patterns, and `include` allows including other URL configurations.
from django.urls import path, include

# Importing `DefaultRouter` from Django REST framework (DRF).
# A router is responsible for automatically generating URL patterns for viewsets.
from rest_framework.routers import DefaultRouter

# Importing viewsets from the current app's `views.py` file.
# Viewsets are a higher-level abstraction in DRF that combine logic for handling HTTP methods (GET, POST, etc.).
from .views import CategoryViewSet, ProductViewSet, SaleViewSet

# Creating an instance of `DefaultRouter`.
# `DefaultRouter` is a specialized router in DRF that automatically generates a root API view and supports format suffixes (e.g., `.json`).
router = DefaultRouter()

# Registering the `CategoryViewSet` with the router.
# The first argument (`r'categories'`) is the URL prefix for this viewset.
# The second argument is the viewset class itself.
# This will generate URLs like `/categories/` and `/categories/<id>/` for CRUD operations.
router.register(r'categories', CategoryViewSet)

# Registering the `ProductViewSet` with the router.
# Similarly, this will generate URLs like `/products/` and `/products/<id>/`.
router.register(r'products', ProductViewSet)

# Registering the `SaleViewSet` with the router.
# This will generate URLs like `/sales/` and `/sales/<id>/`.
router.register(r'sales', SaleViewSet)

# Defining the `urlpatterns` list, which is the entry point for URL routing in Django.
# This list tells Django how to route incoming HTTP requests to the appropriate views.
urlpatterns = [
    # Including all the URLs generated by the router.
    # The `include(router.urls)` function dynamically adds all the URLs registered with the router.
    path('', include(router.urls)),
]

# --- Additional Explanations ---

# 1. **Django URL Routing**:
#    - Django uses the `urlpatterns` list to map URLs to views.
#    - Each entry in `urlpatterns` is a `path()` or `re_path()` function that defines a route.
#    - The `include()` function allows modular URL configurations by including other `urlpatterns` lists.

# 2. **Django REST Framework (DRF) Routers**:
#    - DRF provides routers like `DefaultRouter` and `SimpleRouter` to simplify URL routing for APIs.
#    - Routers automatically generate URL patterns for viewsets, reducing boilerplate code.
#    - `DefaultRouter` adds an API root view (a landing page for your API) and supports format suffixes.

# 3. **Viewsets**:
#    - A viewset is a class-based view in DRF that combines logic for handling multiple HTTP methods (GET, POST, PUT, DELETE).
#    - For example, `CategoryViewSet` might define how to list, create, retrieve, update, or delete categories.
#    - Viewsets work seamlessly with routers to generate URLs.

# 4. **Best Practices**:
#    - Use routers and viewsets to keep your API code DRY (Don't Repeat Yourself).
#    - Use meaningful URL prefixes (e.g., `categories`, `products`) to make your API intuitive.
#    - Organize your URL configurations modularly using `include()` for better maintainability.

# 5. **Alternatives**:
#    - If you don't want to use routers, you can manually define URL patterns for each viewset using `path()` or `re_path()`.
#    - For example:
#      ```python
#      from .views import CategoryViewSet
#      from rest_framework.routers import SimpleRouter
#      urlpatterns = [
#          path('categories/', CategoryViewSet.as_view({'get': 'list', 'post': 'create'})),
#          path('categories/<int:pk>/', CategoryViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'})),
#      ]
#      ```
#    - However, this approach is more verbose and error-prone.

# 6. **Workflow**:
#    - When a request is made to a URL (e.g., `/categories/`), Django matches it against the `urlpatterns` list.
#    - If the URL matches a route generated by the router, the corresponding viewset method (e.g., `list`, `retrieve`) is called.
#    - The viewset interacts with the database (via models) and serializers to process the request and return a response.